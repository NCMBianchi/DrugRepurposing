extract_genes_from_pathways <- function(pathways, kegg_pathways) {
unique_genes <- unique(unlist(lapply(pathways, function(pathway) {
if (!is.null(kegg_pathways[[pathway]])) {
return(kegg_pathways[[pathway]])
} else {
return(NULL)
}
})))
return(unique_genes)
}
# convert pathways back to genes involved in them
dmso_genes <- extract_genes_from_pathways(dmso_unique_pathways, kegg_pathways)
mpa_genes <- extract_genes_from_pathways(mpa_unique_pathways, kegg_pathways)
guanine_genes <- extract_genes_from_pathways(guanine_unique_pathways, kegg_pathways)
guaninempa_genes <- extract_genes_from_pathways(guaninempa_unique_pathways, kegg_pathways)
# extrapolate subset of genes 'uniquely' expressed by cells in given growth media
expression_data <- GetAssayData(seurat_object, assay = "RNA", slot = "data")
dmso_expression <- expression_data[dmso_genes[dmso_genes %in% rownames(expression_data)], , drop = FALSE]
mpa_expression <- expression_data[mpa_genes[mpa_genes %in% rownames(expression_data)], , drop = FALSE]
guanine_expression <- expression_data[guanine_genes[guanine_genes %in% rownames(expression_data)], , drop = FALSE]
guaninempa_expression <- expression_data[guaninempa_genes[guaninempa_genes %in% rownames(expression_data)], , drop = FALSE]
# change non-specific growth medium label to 'other'
sample_labels <- seurat_object@meta.data$sample
dmso_labels <- ifelse(sample_labels == "DMSO", 1, 0)
mpa_labels <- ifelse(sample_labels == "MPA", 1, 0)
guanine_labels <- ifelse(sample_labels == "Guanine", 1, 0)
guaninempa_labels <- ifelse(sample_labels == "Guanine_MPA", 1, 0)
if (class(dmso_expression) == "dgCMatrix") {
dmso_expression <- as.matrix(dmso_expression)
}
if (class(mpa_expression) == "dgCMatrix") {
mpa_expression <- as.matrix(mpa_expression)
}
if (class(guanine_expression) == "dgCMatrix") {
guanine_expression <- as.matrix(guanine_expression)
}
if (class(guaninempa_expression) == "dgCMatrix") {
guaninempa_expression <- as.matrix(guaninempa_expression)
}
dmso_expression_filtered <- cbind(t(dmso_expression), Condition = dmso_labels)
mpa_expression_filtered <- cbind(t(mpa_expression), Condition = mpa_labels)
guanine_expression_filtered <- cbind(t(guanine_expression), Condition = guanine_labels)
guaninempa_expression_filtered <- cbind(t(guaninempa_expression), Condition = guaninempa_labels)
rm(extract_genes_from_pathways,dmso_unique_pathways,mpa_unique_pathways,guanine_unique_pathways,guaninempa_unique_pathways,dmso_genes,mpa_genes,guanine_genes,guaninempa_genes,expression_data,dmso_expression,mpa_expression,guanine_expression,guaninempa_expression,sample_labels,dmso_labels,mpa_labels,guanine_labels,guaninempa_labels)
dmso_data <- as.data.frame(dmso_expression_filtered)
mpa_data <- as.data.frame(mpa_expression_filtered)
guanine_data <- as.data.frame(guanine_expression_filtered)
guaninempa_data <- as.data.frame(guaninempa_expression_filtered)
dmso_data$Condition <- factor(dmso_data$Condition, levels = c(0, 1))
mpa_data$Condition <- factor(mpa_data$Condition, levels = c(0, 1))
guanine_data$Condition <- factor(guanine_data$Condition, levels = c(0, 1))
guaninempa_data$Condition <- factor(guaninempa_data$Condition, levels = c(0, 1))
dmso_model <- glm(Condition ~ ., data = dmso_data, family = binomial())
mpa_model <- glm(Condition ~ ., data = mpa_data, family = binomial())
guanine_model <- glm(Condition ~ ., data = guanine_data, family = binomial())
guaninempa_model <- glm(Condition ~ ., data = guaninempa_data, family = binomial())
model_summary <- summary(dmso_model)
cat("AIC of the 'DMSO' model:", model_summary$aic, "\n")
cat("Residual Deviance:", model_summary$deviance, "on", model_summary$df.residual, "degrees of freedom\n")
cat("Null Deviance:", model_summary$null.deviance, "on", model_summary$df.null, "degrees of freedom\n")
model_summary <- summary(mpa_model)
cat("AIC of the 'MPA' model:", model_summary$aic, "\n")
cat("Residual Deviance:", model_summary$deviance, "on", model_summary$df.residual, "degrees of freedom\n")
cat("Null Deviance:", model_summary$null.deviance, "on", model_summary$df.null, "degrees of freedom\n")
model_summary <- summary(guanine_model)
cat("AIC of the 'Guanine' model:", model_summary$aic, "\n")
cat("Residual Deviance:", model_summary$deviance, "on", model_summary$df.residual, "degrees of freedom\n")
cat("Null Deviance:", model_summary$null.deviance, "on", model_summary$df.null, "degrees of freedom\n")
model_summary <- summary(guaninempa_model)
cat("AIC of the 'Guanine_MPA' model:", model_summary$aic, "\n")
cat("Residual Deviance:", model_summary$deviance, "on", model_summary$df.residual, "degrees of freedom\n")
cat("Null Deviance:", model_summary$null.deviance, "on", model_summary$df.null, "degrees of freedom\n")
rm(model_summary,dmso_data,mpa_data,guanine_data,guaninempa_data,dmso_expression_filtered,mpa_expression_filtered,guanine_expression_filtered,guaninempa_expression_filtered)
# Normalise the expression matrix
pathway_expression_matrix <- scale(pathway_expression_matrix)
# Calculate similarity
cosine_similarity <- function(vector1, vector2) {
valid_indices <- !is.na(vector1) & !is.na(vector2)
sum(vector1[valid_indices] * vector2[valid_indices]) /
(sqrt(sum(vector1[valid_indices]^2)) * sqrt(sum(vector2[valid_indices]^2)))
}
similarity_matrix <- matrix(nrow = nrow(pathway_expression_matrix),
ncol = ncol(signature_matrix))
for (i in 1:nrow(pathway_expression_matrix)) {
for (j in 1:ncol(signature_matrix)) {
similarity_matrix[i, j] <- cosine_similarity(pathway_expression_matrix[i, ],
signature_matrix[, j])
}
}
colnames(similarity_matrix) <- colnames(signature_matrix)
rm(i,j,cosine_similarity)
head(similarity_matrix)
predicted_conditions <- apply(similarity_matrix, 1, which.max)
predicted_conditions <- colnames(signature_matrix)[predicted_conditions]
seurat_object$predicted_sample_1 <- ifelse(is.na(predicted_conditions),"Unclassified", predicted_conditions)
predicted_conditions[1:30]  # first 30 cells
summary(as.vector(similarity_matrix))
hist(as.vector(similarity_matrix), breaks = 50,
main = "Distribution of Similarity Scores")
hist(similarity_matrix[, "DMSO"], breaks = 50, main = "DMSO",
xlab = "Similarity Score", col = "#2a9d8f")
hist(similarity_matrix[, "MPA"], breaks = 50, main = "MPA",
xlab = "Similarity Score", col = "#f4a261")
hist(similarity_matrix[, "Guanine"], breaks = 50, main = "Guanine",
xlab = "Similarity Score", col = "#cdb4db")
hist(similarity_matrix[, "Guanine_MPA"], breaks = 50, main = "Guanine_MPA",
xlab = "Similarity Score", col = "#e76f51")
threshold <- 0.1 # previously 0.5
classified_cells <- apply(similarity_matrix, 1, function(row) {
if(max(row) > threshold) which.max(row) else NA
})
classified_cells <- colnames(signature_matrix)[classified_cells]
seurat_object$predicted_sample_2 <- ifelse(is.na(classified_cells),"Unclassified", classified_cells)
classified_cells[1:30]
head(seurat_object@meta.data[,c(4,14:15)])
pathway_expression_matrix_sub <- pathway_expression_matrix[, colSums(is.na(pathway_expression_matrix)) == 0]
pathway_expression_matrix_df <- as.data.frame(pathway_expression_matrix_sub)
cell_conditions <- seurat_object@meta.data$sample
combined_data <- cbind(pathway_expression_matrix_df, Condition = cell_conditions)
set.seed(123)
indices <- sample(1:nrow(combined_data), size = 0.8 * nrow(combined_data))
training_data <- combined_data[indices, ]
scaled_training_data <- scale(training_data[, -ncol(training_data)])
scaled_training_data <- as.data.frame(scaled_training_data)
scaled_training_data$Condition <- training_data$Condition
scaled_training_data$Condition <- as.factor(scaled_training_data$Condition)
testing_data <- combined_data[-indices, ]
scaled_testing_data <- scale(testing_data[, -ncol(testing_data)])
scaled_testing_data <- as.data.frame(scaled_testing_data)
scaled_testing_data$Condition <- testing_data$Condition
scaled_testing_data$Condition <- as.factor(scaled_testing_data$Condition)
# Training
svm_model <- svm(Condition ~ ., data = scaled_training_data, kernel = 'radial')
# Testing
svm_predictions <- predict(svm_model, newdata = scaled_testing_data)
scaled_pathway_expression_matrix <- scale(pathway_expression_matrix_df)
scaled_pathway_expression_matrix <- as.data.frame(scaled_pathway_expression_matrix)
predicted_conditions <- predict(svm_model, newdata = scaled_pathway_expression_matrix)
seurat_object$classification_pred <- predicted_conditions
head(seurat_object@meta.data[,c(4,16)])
rm(predicted_conditions,scaled_pathway_expression_matrix,scaled_training_data,testing_data,training_data,indices,pathway_expression_matrix_sub,pathway_expression_matrix_df,combined_data,cell_conditions)
table_obs_pred_1 <- table(seurat_object$sample,
seurat_object$predicted_sample_1)
table_obs_pred_1
chisq.test(table_obs_pred_1)
percentage_correct_1 <- seurat_object@meta.data %>%
group_by(sample) %>%
summarize(
correct = mean(sample == predicted_sample_1, na.rm = TRUE),
sample_size = n()
) %>%
mutate(predicted_perc = sprintf("%.1f%%", 100 * correct))
percentage_correct_1[,c(1,3:4)]
table_obs_pred_2 <- table(seurat_object$sample,
seurat_object$predicted_sample_2)
table_obs_pred_2
chisq.test(table_obs_pred_2)  # w/ 'Unclassified'
NAs <- table_obs_pred_2[,5]
table_obs_pred_2b <- table_obs_pred_2[, -5]
chisq.test(table_obs_pred_2b)  # w/out 'Unclassified'
percentage_correct_2 <- seurat_object@meta.data %>%
mutate(
is_correct = ifelse(sample == predicted_sample_2, 1, 0)
) %>%
group_by(sample) %>%
summarize(
sample_size = n(),
correct = sum(is_correct, na.rm = TRUE)
) %>%
mutate(
NAs = sapply(sample, function(x) table_obs_pred_2[x, "Unclassified"] %>% as.integer()),
subset_size = sample_size - NAs,
predicted_perc = sprintf("%.1f%%", 100 * correct / sample_size),
subset_perc = ifelse(subset_size > 0, sprintf("%.1f%%", 100 * correct / subset_size), NA)
)
percentage_correct_2[,c(1,5:7)]
rm(percentage_correct_1,percentage_correct_2,table_obs_pred_1,table_obs_pred_2,table_obs_pred_2b,threshold)
confusion_matrix <- table(Predicted = svm_predictions, Actual = scaled_testing_data$Condition)
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
confusion_matrix_stats <- confusionMatrix(svm_predictions, scaled_testing_data$Condition)
precision <- as.numeric(confusion_matrix_stats$byClass[,'Pos Pred Value'])
recall <- as.numeric(confusion_matrix_stats$byClass[,'Sensitivity'])
average_precision <- mean(as.numeric(precision), na.rm = TRUE)
average_recall <- mean(as.numeric(recall), na.rm = TRUE)
average_f1_score <- 2 * ((average_precision * average_recall) / (average_precision + average_recall))
print(paste("Avg Precision:", average_precision))
print(paste("Avg Recall:", average_recall))
print(paste("Avg F1 Score:", average_f1_score))
classification_pred_factor <- factor(seurat_object$classification_pred, levels = unique(seurat_object$sample))
sample_factor <- factor(seurat_object$sample)
confusion_matrix_classified <- table(Predicted = seurat_object$classification_pred,
Actual = seurat_object$sample)
accuracy_classified <- sum(diag(confusion_matrix_classified)) / sum(confusion_matrix_classified)
print(paste("Accuracy:", accuracy_classified))
confusion_matrix_stats_classified <- confusionMatrix(classification_pred_factor,
sample_factor)
precision_classified <- as.numeric(confusion_matrix_stats_classified$byClass[,'Pos Pred Value'])
recall_classified <- as.numeric(confusion_matrix_stats_classified$byClass[,'Sensitivity'])
average_precision_classified <- mean(precision_classified, na.rm = TRUE)
average_recall_classified <- mean(recall_classified, na.rm = TRUE)
average_f1_score_classified <- 2 * ((average_precision_classified * average_recall_classified) / (average_precision_classified + average_recall_classified))
print(paste("Avg Precision:", average_precision_classified))
print(paste("Avg Recall:", average_recall_classified))
print(paste("Avg F1 Score:", average_f1_score_classified))
table_obs_pred_classified <- table(seurat_object$sample, seurat_object$classification_pred)
print(table_obs_pred_classified)
chi_sq_test_classified <- chisq.test(table_obs_pred_classified)
print(chi_sq_test_classified)
percentage_correct_3 <- seurat_object@meta.data %>%
group_by(sample) %>%
summarize(
correct = mean(sample == classification_pred, na.rm = TRUE),
sample_size = n()
) %>%
mutate(predicted_perc = sprintf("%.1f%%", 100 * correct))
percentage_correct_3[, c(1, 3:4)]
rm(scaled_testing_data,svm_predictions,confusion_matrix,accuracy,confusion_matrix_stats,precision,recall,average_precision,average_recall,average_f1_score,classification_pred_factor,sample_factor,confusion_matrix_classified,accuracy_classified,confusion_matrix_stats_classified,precision_classified,recall_classified,average_precision_classified,average_recall_classified,average_f1_score_classified,table_obs_pred_classified,chi_sq_test_classified,percentage_correct_3)
UMAP_plot_4 <- ggplot(data = seurat_object@meta.data,
aes(x = UMAP_1, y = UMAP_2)) +
geom_point(aes(color = factor(ifelse(sample == predicted_sample_1,
sample, "Wrongly Predicted"),
levels = c(unique(sample), "Wrongly Predicted")),
alpha = ifelse(sample == predicted_sample_1, 1, 0.5))) +
scale_color_manual(values = c(my_color_palette, "Wrongly Predicted" = "#555555"),
labels = c(unique(seurat_object$sample), "Wrongly Predicted")) +
theme_minimal() +
labs(title = "UMAP: Experimental vs Predicted (direct)", x = "UMAP_1", y = "UMAP_2",
color = "Growth Media") +
theme(legend.position = "right") +
guides(alpha = "none")
UMAP_plot_4
# code for the plots available in the .Rmd file.
UMAP_plot_5 <- ggplot(data = seurat_object@meta.data,
aes(x = UMAP_1, y = UMAP_2)) +
geom_point(aes(color = factor(ifelse(sample == predicted_sample_2,
sample, "Unpredicted"),
levels = c(unique(sample), "Unpredicted")),
shape = factor(ifelse(sample == predicted_sample_2,
"Dot", "Cross")),
alpha = ifelse(sample == predicted_sample_2, 1, 0.5))) +
scale_color_manual(values = c(my_color_palette, "Unpredicted" = "#555555")) +
scale_shape_manual(values = c("Dot" = 16, "Cross" = 3)) +
theme_minimal() +
labs(title = "UMAP: Experimental vs Predicted (threshold)",
x = "UMAP_1", y = "UMAP_2", color = "Growth Media") +
theme(legend.position = "right") +
guides(alpha = "none", shape = "none")
#UMAP_plot_5  #ignored as it is not informative enough
UMAP_plot_6 <- ggplot(data = seurat_object@meta.data,
aes(x = UMAP_1, y = UMAP_2)) +
geom_point(aes(color = sample,
alpha = ifelse(sample == predicted_sample_2, 1, 0.5))) +
scale_color_manual(values = my_color_palette) +
theme_minimal() +
labs(title = "UMAP: Experimental vs Predicted (threshold)",
x = "UMAP_1", y = "UMAP_2", color = "Growth Media") +
guides(alpha = "none") +
theme(legend.position = "right")
UMAP_plot_6
UMAP_plot_7 <- ggplot(data = seurat_object@meta.data, aes(x = UMAP_1, y = UMAP_2)) +
geom_point(aes(color = factor(ifelse(sample == predicted_sample_2, predicted_sample_2,
ifelse(sample == predicted_sample_1, predicted_sample_1, "Discrepancy")),
levels = c(unique(sample), "Discrepancy")),
alpha = ifelse(sample == predicted_sample_2, 1, 0.5))) +
scale_color_manual(values = c(my_color_palette, "Discrepancy" = "#555555")) +
theme_minimal() +
labs(title = "UMAP: Prediction Methods (comparison)", x = "UMAP_1", y = "UMAP_2",
color = "Growth Media") +
theme(legend.position = "right") +
guides(alpha = "none")
#UMAP_plot_7  # ignored an intermediate plot
seurat_object@meta.data$same_prediction <-
seurat_object@meta.data$predicted_sample_1 ==
seurat_object@meta.data$predicted_sample_2
seurat_object@meta.data$match_sample_predicted_1 <-
seurat_object@meta.data$sample == seurat_object@meta.data$predicted_sample_1
UMAP_plot_8 <- ggplot(data = seurat_object@meta.data, aes(x = UMAP_1, y = UMAP_2))
UMAP_plot_8 <- UMAP_plot_8 +
geom_point(data = subset(seurat_object@meta.data, sample != predicted_sample_1),
aes(x = UMAP_1, y = UMAP_2, color = "Wrongly Predicted",
shape = "Wrongly Predicted"),
size = 1, alpha = 0.5) +
scale_color_manual(values = c(my_color_palette, "Wrongly Predicted" = "grey")) +
scale_shape_manual(values = c("Wrongly Predicted" = 3), guide = FALSE)
UMAP_plot_8 <- UMAP_plot_8 +
geom_point(data = subset(seurat_object@meta.data, sample == predicted_sample_1
& predicted_sample_1 != predicted_sample_2),
aes(x = UMAP_1, y = UMAP_2, color = sample),
shape = 16, size = 2, alpha = 0.5) +
scale_color_manual(values = my_color_palette)
UMAP_plot_8 <- UMAP_plot_8 +
geom_point(data = subset(seurat_object@meta.data, sample ==predicted_sample_1
& predicted_sample_1 != predicted_sample_2),
aes(x = UMAP_1, y = UMAP_2, color = sample),
shape = 21, size = 2, alpha = 0.5) +
scale_color_manual(values = my_color_palette)
UMAP_plot_8 <- UMAP_plot_8 +
geom_point(data = subset(seurat_object@meta.data,
sample == predicted_sample_2),
aes(x = UMAP_1, y = UMAP_2, color = sample),
shape = 16, size = 3, alpha = 1) +
scale_color_manual(values = my_color_palette) +
theme_minimal() +
labs(title = "UMAP: Prediction Methods (comparison)",
x = "UMAP_1", y = "UMAP_2",
color = "Growth Media") +
theme(legend.position = "right") +
guides(alpha = "none", color = guide_legend(override.aes = list(shape = 16)),
shape = guide_legend(title = "Prediction Accuracy",
override.aes = list(color = "#555555")))
UMAP_plot_8
rm(UMAP_plot_4,UMAP_plot_5,UMAP_plot_6,UMAP_plot_7,UMAP_plot_8)
meta_data <- as.data.frame(seurat_object@meta.data)
sample_counts <- table(meta_data$sample)
df <- as.data.frame(sample_counts)
names(df) <- c("Sample", "Count")
barplot_1 <- ggplot(df, aes(x = Sample, y = Count, fill = Sample)) +
geom_bar(stat = "identity") +
geom_text(aes(label = Count), vjust = -0.5, fontface = "bold") +
scale_fill_manual(values = my_color_palette) +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "Growth Media Distribution", x = "Growth Media", y = "Number of Cells")
#barplot_1  # ignored as it's an intermediate plot
# Show the counts of correctly predicted labels for 'Growth Media' per method
sample_counts <- table(seurat_object@meta.data$sample)
correct_predicted_1_counts <- table(seurat_object@meta.data$sample[seurat_object@meta.data$sample == seurat_object@meta.data$predicted_sample_1])
correct_predicted_2_counts <- table(seurat_object@meta.data$sample[seurat_object@meta.data$sample == seurat_object@meta.data$predicted_sample_2])
df <- as.data.frame(sample_counts)
colnames(df) <- c("Sample", "1_Sample")
df$`2_Predicted_Sample_1` <- df$Sample %>% map_dbl(~correct_predicted_1_counts[.])
df$`3_Predicted_Sample_2` <- df$Sample %>% map_dbl(~correct_predicted_2_counts[.])
df_melted <- reshape2::melt(df, id.vars = "Sample")
df_melted$color_id <- with(df_melted, paste(Sample, variable, sep = "_"))
combined_palette <- c()
for(sample in unique(df_melted$Sample)) {
combined_palette[paste(sample, "1_Sample", sep = "_")] <- my_color_palette[sample]
combined_palette[paste(sample, "2_Predicted_Sample_1", sep = "_")] <- my_color_palette_2[sample]
combined_palette[paste(sample, "3_Predicted_Sample_2", sep = "_")] <- my_color_palette_3[sample]
}
df_melted$text_color <- ifelse(df_melted$variable == "1_Sample", "black", "white")
barplot_2 <- ggplot(df_melted, aes(x = Sample, y = value, fill = color_id)) +
geom_bar(stat = "identity", position = position_dodge(width = 0), width = 2.6) +
geom_text(data = subset(df_melted, variable == "1_Sample"),
aes(x = Sample, y = value, label = value),
vjust = -0.3, position = position_dodge(width = 0), size = 3, fontface = "bold", color = "black", show.legend = FALSE) +
geom_text(data = subset(df_melted, variable != "1_Sample"),
aes(x = Sample, y = value, label = value),
vjust = -0.3, position = position_dodge(width = 0), size = 3, fontface = "bold", color = "white", show.legend = FALSE) +
scale_fill_manual(values = combined_palette) +
theme_minimal() +
labs(title = "Growth Media Fingerprinting (prediction efficiency)",
x = "Growth Media", y = "Number of Cells") +
theme(legend.position = "none")
barplot_2
# Show the proportion of correctly predicted labels for 'Growth Media' per method (TOTAL)
seurat_object@meta.data$category <- with(seurat_object@meta.data, case_when(
sample == predicted_sample_1 & predicted_sample_1 == predicted_sample_2 ~ "Direct + Threshold",
sample == predicted_sample_1 & predicted_sample_1 != predicted_sample_2 ~ "Direct",
TRUE ~ "Wrongly Predicted"
))
category_proportions <- seurat_object@meta.data %>%
group_by(category) %>%
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count) * 100) %>%
mutate(ypos = cumsum(Proportion) - 0.5 * Proportion )
category_proportions <- category_proportions %>%   # required to horizontally flip
arrange(desc(category)) %>%
mutate(Proportion = Count / sum(Count) * 100) %>%
mutate(ypos = cumsum(Proportion) - 0.5 * Proportion )
piechart_1 <- ggplot(category_proportions, aes(x = "", y = Proportion, fill = category)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) +
theme_void() +
scale_fill_manual(values = c("Direct + Threshold" = "black", "Direct" = "#555555", "Wrongly Predicted" = "grey")) +
labs(title = "Growth Media Fingerprinting (prediction efficiency proportion): TOTAL", fill = "Category") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "bottom", legend.title = element_blank(),
legend.text = element_text()) +
geom_text(aes(y = ypos, label = paste(round(Proportion, 1), "%")), color = "white", fontface = "bold")
piechart_1
# https://r-graph-gallery.com/piechart-ggplot2.html as a source for percentage positioning
# Show the proportion of correctly predicted labels for 'Growth Media' per method (DMSO)
dmso_data <- seurat_object@meta.data %>%
filter(sample == "DMSO")
dmso_data$category <- with(dmso_data, case_when(
sample == predicted_sample_1 & predicted_sample_1 == predicted_sample_2 ~ "Direct + Threshold",
sample == predicted_sample_1 & predicted_sample_1 != predicted_sample_2 ~ "Direct",
TRUE ~ "Wrongly Predicted"
))
dmso_category_proportions <- dmso_data %>%
group_by(category) %>%
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count) * 100) %>%
mutate(ypos = cumsum(Proportion) - 0.5 * Proportion)
dmso_category_proportions <- dmso_category_proportions %>%
arrange(desc(category)) %>%
mutate(Proportion = Count / sum(Count) * 100) %>%
mutate(ypos = cumsum(Proportion) - 0.5 * Proportion )
piechart_2 <- ggplot(dmso_category_proportions, aes(x = "", y = Proportion, fill = category)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) +
theme_void() +
scale_fill_manual(values = c("Direct + Threshold" = "#15514A", "Direct" = "#1e7167", "Wrongly Predicted" = "#2a9d8f")) +
labs(title = "DMSO", fill = "Category") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "bottom", legend.title = element_blank()) +
geom_text(aes(y = ypos, label = paste(round(Proportion, 1), "%")), color = "white", fontface = "bold")
piechart_2
# Show the proportion of correctly predicted labels for 'Growth Media' per method (Guanine)
guanine_data <- seurat_object@meta.data %>%
filter(sample == "Guanine")
guanine_data$category <- with(guanine_data, case_when(
sample == predicted_sample_1 & predicted_sample_1 == predicted_sample_2 ~ "Direct + Threshold",
sample == predicted_sample_1 & predicted_sample_1 != predicted_sample_2 ~ "Direct",
TRUE ~ "Wrongly Predicted"
))
guanine_category_proportions <- guanine_data %>%
group_by(category) %>%
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count) * 100) %>%
mutate(ypos = cumsum(Proportion) - 0.5 * Proportion)
guanine_category_proportions <- guanine_category_proportions %>%
arrange(desc(category)) %>%
mutate(Proportion = Count / sum(Count) * 100) %>%
mutate(ypos = cumsum(Proportion) - 0.5 * Proportion )
piechart_3 <- ggplot(guanine_category_proportions, aes(x = "", y = Proportion, fill = category)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) +
theme_void() +
scale_fill_manual(values = c("Direct + Threshold" = "#A375BD", "Direct" = "#B591CA", "Wrongly Predicted" = "#cdb4db")) +
labs(title = "Guanine", fill = "Category") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "bottom", legend.title = element_blank()) +
geom_text(aes(y = ypos, label = paste(round(Proportion, 1), "%")), color = "white", fontface = "bold")
piechart_3
# Show the proportion of correctly predicted labels for 'Growth Media' per method (Guanine_MPA)
guanine_mpa_data <- seurat_object@meta.data %>%
filter(sample == "Guanine_MPA")
guanine_mpa_data$category <- with(guanine_mpa_data, case_when(
sample == predicted_sample_1 & predicted_sample_1 == predicted_sample_2 ~ "Direct + Threshold",
sample == predicted_sample_1 & predicted_sample_1 != predicted_sample_2 ~ "Direct",
TRUE ~ "Wrongly Predicted"
))
guanine_mpa_category_proportions <- guanine_mpa_data %>%
group_by(category) %>%
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count) * 100) %>%
mutate(ypos = cumsum(Proportion) - 0.5 * Proportion)
guanine_mpa_category_proportions <- guanine_mpa_category_proportions %>%
arrange(desc(category)) %>%
mutate(Proportion = Count / sum(Count) * 100) %>%
mutate(ypos = cumsum(Proportion) - 0.5 * Proportion )
piechart_4 <- ggplot(guanine_mpa_category_proportions, aes(x = "", y = Proportion, fill = category)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) +
theme_void() +
scale_fill_manual(values = c("Direct + Threshold" = "#C53D1B", "Direct" = "#E24D28", "Wrongly Predicted" = "#e76f51")) +
labs(title = "Guanine_MPA", fill = "Category") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "bottom", legend.title = element_blank()) +
geom_text(aes(y = ypos, label = paste(round(Proportion, 1), "%")), color = "white", fontface = "bold")
piechart_4
# Show the proportion of correctly predicted labels for 'Growth Media' per method (MPA)
mpa_data <- seurat_object@meta.data %>%
filter(sample == "MPA")
mpa_data$category <- with(mpa_data, case_when(
sample == predicted_sample_1 & predicted_sample_1 == predicted_sample_2 ~ "Direct + Threshold",
sample == predicted_sample_1 & predicted_sample_1 != predicted_sample_2 ~ "Direct",
TRUE ~ "Wrongly Predicted"
))
mpa_category_proportions <- mpa_data %>%
group_by(category) %>%
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count) * 100) %>%
mutate(ypos = cumsum(Proportion) - 0.5 * Proportion)
mpa_category_proportions <- mpa_category_proportions %>%
arrange(desc(category)) %>%
mutate(Proportion = Count / sum(Count) * 100) %>%
mutate(ypos = cumsum(Proportion) - 0.5 * Proportion )
piechart_5 <- ggplot(mpa_category_proportions, aes(x = "", y = Proportion, fill = category)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) +
theme_void() +
scale_fill_manual(values = c("Direct + Threshold" = "#E57010", "Direct" = "#F0852D", "Wrongly Predicted" = "#f4a261")) +
labs(title = "MPA", fill = "Category") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "bottom", legend.title = element_blank()) +
geom_text(aes(y = ypos, label = paste(round(Proportion, 1), "%")), color = "white", fontface = "bold")
piechart_5
rm(piechart_1,piechart_2,piechart_3,piechart_4,piechart_5,barplot_1,barplot_2,category_proportions,df,df_melted,dmso_category_proportions,dmso_data,guanine_category_proportions,guanine_data,guanine_mpa_category_proportions,guanine_mpa_data,meta_data,mpa_category_proportions,mpa_data,sample,sample_counts,NAs,correct_predicted_1_counts,correct_predicted_2_counts)
UMAP_plot_9 <- ggplot(data = seurat_object@meta.data,
aes(x = UMAP_1, y = UMAP_2)) +
geom_point(aes(color = factor(ifelse(sample == classification_pred,
sample, "Wrongly Predicted"),
levels = c(unique(sample), "Wrongly Predicted")),
alpha = ifelse(sample == classification_pred, 1, 0.5))) +
scale_color_manual(values = c(my_color_palette, "Wrongly Predicted" = "#555555"),
labels = c(unique(seurat_object$sample), "Wrongly Predicted")) +
theme_minimal() +
labs(title = "UMAP: Experimental vs Predicted (SVM)", x = "UMAP_1", y = "UMAP_2",
color = "Growth Media") +
theme(legend.position = "right") +
guides(alpha = "none")
UMAP_plot_9
rm(UMAP_plot_9)
setwd("~/DrugRepurposing/NOT_TO_PUSH/NICCOLOs/PIPELINE/drugapp/data/reference/Huntington disease (2022-06-27)/monarch")
edges <- read.csv("monarch_edges_disease_v2022-06-27.csv")
nodes <- read.csv("monarch_nodes_disease_v2022-06-27.csv")
orthopheno_edges <- read.csv("monarch_orthopeno_network_disease_v2022-06-27.csv")
edges <- read.csv("monarch_edges_disease_v2022-06-27.csv")
nodes <- read.csv("monarch_nodes_disease_v2022-06-27.csv")
CR_edges <- read.csv("monarch_edges_disease_v2022-06-27.csv")
CR_nodes <- read.csv("monarch_nodes_disease_v2022-06-27.csv")
View(CR_nodes)
